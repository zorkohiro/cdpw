#!/usr/bin/python3
"""
Program to edit from JSON file input to add more or
edit existing data and to ultimately sign and print
a text based report from this data.
"""

#################################################################################################
#
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  Copyright (C) 2025 Kaiser Permanente
#
#  This program is free software: you can redistribute it and/or
#  modify it under the terms of the GNU General Public License as
#  published by the Free Software Foundation, either version 3 of the
#  License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful, but
#  WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
#  General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program. If not, see <http://www.gnu.org/licenses/>.
#


#################################################################################################
#
# Imports
#
import subprocess
import tkinter as tk
from tkinter import messagebox
import datetime
import json
import textwrap
import argparse
from os import path as p

#################################################################################################
#
# Variables
#
rowvar = 0
fontfamily = 'Times'
fontsize = 12
fontstring = fontfamily + ' ' + str(fontsize)
boxsize = 3
cbobj = {}

pbobj = {}
have_pseq = False

rdobj = {}

last_signer = ""
cnfg_data = []
entryables = []

report_dir = "/code_dark/reports"
configurator = "/code_dark/config/configurator.json"
last_signer_file  = "/dev/shm/last_signer"

#################################################################################################
#
# Constants and shorthands
#

HI = "history"
PA = "patient_age"
PH = "patient_history"
TH = "technique"
DC = "description"
FI = "findings"
CM = "comparison"
IM = "impression"
PM = "parameters"

PARAMETERS = "** PARAMETERS **"
HISTORY = "** HISTORY **"
PATIENT_AGE = "Patient Age"
PATIENT_HISTORY = "Patient History"

TECHNIQUE = "** TECHNIQUE **"

FINDINGS = "** FINDINGS **"
COMPARISON = "Comparison"

IMPRESSION = "** IMPRESSION **"

#
# Process command line arguments and load initial json data
#
parser = argparse.ArgumentParser(description="Code Dark Report Entry Package")
parser.add_argument("-j", "--json", help="Input json file", required=True)
parser.add_argument("-R", "--report_dir", help="Where we fetch/save reports", default=report_dir)
parser.add_argument("-C", "--configurator", help="Where we have the CDPW configuration file", default=configurator)
parser.add_argument("-f", "--fontsize", help="Font Size (default 12)")

args = vars(parser.parse_args())

jsonfile=args['json']
reportfl=report_dir + '/' + p.basename(jsonfile.replace(".json", ".txt"))

if args['report_dir']:
    report_dir = args['report_dir']
if args['configurator']:
    configurator = args['configurator']
if args['fontsize']:
    fontsize = int(args['fontsize'])
    fontstring = 'Time ' + args['fontsize']
#
# Read in configurator data
#
with open(configurator, "r") as cfile:
    cnfg_data = json.load(cfile)

#
# Read in JSON saved data
#
with open(jsonfile, "r") as infile:
    json_data = json.load(infile)

#
# Version check
#

version = json_data["version"]
if version < 2:
    print("Version of JSON too low: " + str(version))
    exit(1)

#
# Set mrn/session from database.
#
# We never update it from this program,
# so if it is unset, we live with it unset
# by calling it out to be bogus.
#
mrn = json_data["mrn"]
if mrn == "":
    mrn = "BOGUS1234"

session = json_data["session"]
if session == "":
    session = "BOGUS5678"

uuid = json_data["uuid"]
if uuid == "":
    uuid = "BOGUS9abc"



#
# Structure of JSON data
#
# The JSON file is an object with a list of contained sub-objects and arrays.
# Most of the sub-objects are common across all report types. However,
# findings are a special type that has been genericized so we don't have
# to have a different program for each report type. This is finessed using
# an array and a couple of sub-objects to control both order of presentation,
# the format of the presentation and type of input and any padding or
# intermediate level labels.
#
# The common objects are grouped thusly:
#
# 1. Housekeeping items
#   
# Items marked with '*' come from the DiCom object and are interpolated
# into the json data at first edit by spawn_editor.
#
#  "version"              : This api's version # (2)
#  "mrn"                  : Medical Record Number*
#  "session"              : Accession Number*
#  "uuid"                 : Orthanc Study UUID*
#  "date"                 : Date study was performed*
#  "study_description"    : Description of Study*
#  "studyid"              : Study Identifier*
#  "doctor"               : Requesting Physiscian*
#  "signed"               : boolean about whether the report has been signed (and is thus read-only)
#  "signer"               : who signed the report
#  "template"             : self-referential template name to internally identify in the JSON data the template json file name
#
# 2. Parameters (optional section)
#
#   This allows us to place some paramters ahead of Patient History.
#
#   This has the simlar format as Findings below below.
#
#   This has the form:
#
#    "pseq" : [
#     "p:PARAMETER_LABEL:TYPE"
#    ]
#    "parameters" : {
#      "p" : "foo"
#    }
#
# 3. Age/History
#
#    Common nested object to have an entry for patient age (in years) and a free form patient history box.
#    This section is prefaced by a fixed large label "HISTORY".
#
# 4. Title      : the title for this study
#
#    This goes in the title bar for the entry box and as a centered emboldened first line of entry b ox
#    as well as printed report.
#
# 5. Technique
#
#    Common nested object to describe how the study was performed, optionally containing CTDI and DLP for contrast media.
#    This ends with freeform box for comparison information.
#    This section is prefaced by a fixed large label "TECHNIQUE".
#
# 5. Findings (see below for detailed description)
#
# 6. Impressions
#
#    Common object to have a free form written impression from the radiologist drawing conclusions about the study.
#    This section is prefaced by a fixed large label "IMPRESSIONS".
#
# Findings
#
#    This section is prefaced by a fixed large label with the name "FINDINGS" on either input or on the report.
#
#    This consists of two sections.
#  
#    To make this generic enough, we start with an array called "fseq" that consists of a sequence
#    of strings. These strings are either the string "space" which just indicates we want a space on
#    output, a string label:HDR which indicates we want a fixed left aligned label of HDR, or one of the
#    strings <key>:HDR:ENTRY, <key>:HDR:BOX, or <key>:HDR:BOXLABEL. The latter trio indicates
#    we want to put out single line input entry with HDR, a plain BOX for entry (HDR is ignored),
#    or a BOX for entry hanging adjacent to the right of the label HDR.
#
#    This is then followed by the "findings" dictionary which has key value pairs. The first is the
#    index which <key> above refers to and is used to pull the value or set the value for that
#    key. This allows starting with pre-defined strings (or empty strings) for all known keys
#    that can be edited and saved.
#


################################################################################
#
# Shorthand functions
#
def add_section_label(str, row):
    tlab = tk.Label(root, text=str, relief=tk.RAISED, font=(fontfamily, fontsize))
    tlab.grid(sticky=tk.N+tk.W, row=row, pady=(1,1))
    return row + 1

def add_label(str, row, col):
    tlab = tk.Label(root, text=str, relief=tk.GROOVE, font=(fontfamily, fontsize))
    tlab.grid(sticky=tk.N+tk.W, row=row, column=col)
    return row + 1

""" Add a label to the column specified (usually col 0 on the left) """
def add_entry(initial, w, j, row, col):
    tt_text = tk.StringVar()
    tt_text.set(initial)
    if w < 0:
            tt_entry = tk.Entry(root, textvariable=tt_text, justify=j, font=fontstring)
            tt_entry.grid(sticky=tk.EW, row=row, column=col)
    else:
            tt_entry = tk.Entry(root, textvariable=tt_text, justify=j, width=w, font=fontstring)
            tt_entry.grid(sticky=tk.W, row=row, column=col)
    if json_data["signed"]:
        tt_entry.config(state="disabled", bg="orange")
    entryables.append(tt_entry)
    return tt_text, row + 1

""" Add an entry to the right of a label """
def add_label_entry(label, ivalue, row):
    tlab = tk.Label(root, text=label, anchor=tk.W, justify="left", font=(fontfamily, fontsize - 1))
    tlab.grid(sticky=tk.N+tk.W, row=row, column=0)
    tt_text = tk.StringVar()
    tt_text.set(ivalue)
    tt_entry = tk.Entry(root, textvariable=tt_text, width=90, justify="left", font=fontstring)
    tt_entry.grid(sticky=tk.W, row=row, column=1)
    if json_data["signed"]:
        tt_entry.config(state="disabled", bg="orange")
    entryables.append(tt_entry)
    return tt_text, row + 1

""" Add a short entry to the right of a label """
def add_short_label_entry(label, ivalue, row):
    tlab = tk.Label(root, text=label, anchor=tk.W, justify="left", font=(fontfamily, fontsize - 1))
    tlab.grid(sticky=tk.N+tk.W, row=row, column=0)
    tt_text = tk.StringVar()
    tt_text.set(ivalue)
    tt_entry = tk.Entry(root, textvariable=tt_text, width=4, justify="left", font=fontstring)
    tt_entry.grid(sticky=tk.W, row=row, column=1)
    if json_data["signed"]:
        tt_entry.config(state="disabled", bg='orange')
    entryables.append(tt_entry)
    return tt_text, row + 1

""" Add an entry scrunched up next to a label """
def add_tight_label_entry(label, ivalue, row, w, ew):
    tlab = tk.Label(root, text=label, anchor=tk.W, width=w, justify="left", font=(fontfamily, fontsize - 1))
    tlab.grid(sticky=tk.W, row=row, column=0)
    tt_text = tk.StringVar()
    tt_text.set(ivalue)
    tt_entry = tk.Entry(root, textvariable=tt_text, width=ew, justify="left", font=fontstring)
    tt_entry.grid(sticky=tk.W, row=row, column=0, padx=(((w * fontsize) * 3)/ 5, 0))
    if json_data["signed"]:
        tt_entry.config(state="disabled", bg="orange")
    entryables.append(tt_entry)
    return tt_text, row + 1

""" add an unlabeled box """
def add_box(insert, row):
    box = tk.Text(root, height=boxsize, width=90, font=fontstring)
    box.insert(tk.END, insert)
    box.grid(sticky=tk.EW, row=row, column=0, columnspan=3, pady=(0,10), padx=(0,9))
    if json_data["signed"]:
        box.config(state="disabled", bg="orange")
    entryables.append(box)
    return box, row + boxsize

""" add a box hanging to the right of a label """
def add_label_box(str, insert, row):
    tlab = tk.Label(root, text=str, anchor=tk.W, justify="left", font=(fontfamily, fontsize - 1))
    tlab.grid(sticky=tk.N+tk.W, row=row, column=0)
    box = tk.Text(root, height=boxsize, width=90, font=fontstring)
    box.insert(tk.END, insert)
    box.grid(sticky=tk.W, row=row, column=1, columnspan=2, pady=(0,10), padx=(0,10))
    if json_data["signed"]:
        box.config(state="disabled", bg="orange")
    entryables.append(box)
    return box, row + boxsize

""" add an optionMenu scrunched up next to a label """

def add_label_menu(str, options, initial, row, col, w, ew):
    tlab = tk.Label(root, text=str.upper() + ":", relief=tk.RAISED, font=(fontfamily, fontsize - 1))
    tlab.grid(sticky=tk.W, row=row, column=col)
    clickval = tk.StringVar()
    clickval.set(initial)
    tt_menu = tk.OptionMenu(root, clickval, *options)
    tt_menu.config(width=w)
    tt_menu.grid(row=row, column=col, sticky=tk.E, padx=(((w * fontsize) * 3)/ 5, 0))
    if json_data["signed"]:
        tt_menu.config(state="disabled", bg="orange")
    entryables.append(tt_menu)
    return clickval, row + 1

#################################################################################################
#
# Window and Frame Management Code
#

#
# Root window creation
#
root=tk.Tk()
root.title(json_data["title")

#
# Need this to make sure Entry fields abut labels,
# because otherwise boxes will force then Entry field
# to the middle of a wide box.
#
root.grid_columnconfigure(1, weight=1)

#
# Display sections with labels and text boxes,
# using data read in as existing values.
#


# (Optional) Parameter Section
try:
    if json_data["pseq"]:
        have_pseq = True
except:
    pass

if have_pseq:
    rowvar = add_section_label(PARAMETERS, rowvar)
    for entry in json_data["pseq"]:
        words = entry.split(':')
        nw = len(words)
        if nw == 3:
            key = words[0]
            lbl = words[1]
            typ = words[2]
            if typ == "ENTRY":
                cb, rowvar = add_label_entry(lbl, json_data[PM][key], rowvar)
            elif typ == "TIGHTENTRY":
                cb, rowvar = add_tight_label_entry(lbl, json_data[PM][key], rowvar, len(lbl) + 5, 3)
            elif typ == "BOX":
                cb, rowvar = add_box(json_data[PM][key], rowvar)
            elif typ == "BOXLABEL":
                cb, rowvar = add_label_box(lbl, json_data[PM][key], rowvar)
            else:
                print("uknown typ", typ, "for", entry)
                exit(1)
            pbobj[key] = cb
        elif nw == 4:
            key = words[0]
            lbl = words[1]
            typ = words[2]
            lst = words[3]
            if typ == "MENU":
                mwrds = lst.split(',')
                if len(mwrds) > 1:
                    if json_data[PM][key]:
                        dfl = json_data[PM][key]
                    else:
                        dfl = mwrds[0]
                        if dfl == '*':
                            dfl = ""
                    del(mwrds[0])
                    pbobj[key], rowvar = add_label_menu(lbl, mwrds, dfl, rowvar, 0, len(lbl) + 5, 20)
                else:
                    print("bad MENU specification: ", entry)
                    exit(1)
        else:
            print("wordlen of '" + entry + "' is ", len(words))
            exit(1)

# History Section
rowvar = add_section_label(HISTORY, rowvar)
age_entry, rowvar = add_short_label_entry(PATIENT_AGE + " (years) ", json_data[HI][PA], rowvar)
history_box, rowvar = add_label_box(PATIENT_HISTORY, json_data[HI][PH], rowvar)

# Technique Section
rowvar = add_section_label(TECHNIQUE, rowvar)
tek_box, rowvar = add_box(json_data[TH][DC], rowvar)

if "ctdi" in json_data[TH]:
    ctdi_entry, rowvar = add_tight_label_entry("CTDI (mGy)", json_data[TH]["ctdi"], rowvar, 15, 3)
    dlp_entry, rowvar = add_tight_label_entry("DLP (mGy-cm)", json_data[TH]["dlp"], rowvar, 15, 3)

comparison_box, rowvar = add_label_box(COMPARISON, json_data[TH][CM], rowvar)

# Findings Section
rowvar = add_section_label(FINDINGS, rowvar)

for entry in json_data["fseq"]:
    words = entry.split(':')
    # Add a row when having a space
    if len(words) == 1:
        rowvar = rowvar + 1
    elif len(words) == 2:
        rowvar = add_label(words[1], rowvar, 0)
    elif len(words) == 3:
        key = words[0]
        lbl = words[1]
        typ = words[2]
        if typ == "ENTRY":
            cb, rowvar = add_label_entry(lbl, json_data[FI][key], rowvar)
        elif typ == "TIGHTENTRY":
            cb, rowvar = add_tight_label_entry(lbl, json_data[FI][key], rowvar, len(lbl) + 5, 3)
        elif typ == "BOX":
            cb, rowvar = add_box(json_data[FI][key], rowvar)
        elif typ == "BOXLABEL":
            cb, rowvar = add_label_box(lbl, json_data[FI][key], rowvar)
        else:
            print("uknown typ", typ, "for", entry)
            exit(1)
        cbobj[key] = cb
    else:
        print("wordlen of '" + entry + "' is ", len(words))
        exit(1)

# Impressions Section
rowvar = add_section_label(IMPRESSION, rowvar)
impress_box, rowvar = add_box(json_data[IM], rowvar)

#################################################################################################
#
# Data interactions with tkinter frame/boxes plus action functions
#

#
# Define a function that will save data to a datafile.
# As a side effect, it updates existing data from labels and text boxes
#
def save_data(jd):
    """ Update from tkinter entry and box areas """

    """ Parameters - still optional so check whether we have set that true earlier """
    if have_pseq:
        for entry in json_data["pseq"]:
            words = entry.split(':')
            if len(words) == 4:
                key = words[0]
                obj = pbobj[key]
                typ = words[2]
                if typ == "ENTRY" or typ == "TIGHTENTRY" or typ == "MENU":
                    jd[PM][key] = obj.get()
                elif typ == "BOX" or typ == "BOXLABEL":
                    jd[PM][key] = obj.get("1.0", "end-1c")

    """ Patient History """
    jd[HI][PA] = age_entry.get()
    jd[HI][PH] = history_box.get("1.0", "end-1c")

    jd[TH][DC] = tek_box.get("1.0", "end-1c")
    if "ctdi" in json_data[TH]:
        jd[TH]["ctdi"] = ctdi_entry.get()
        jd[TH]["dlp"] = dlp_entry.get()
    jd[TH][CM] = comparison_box.get("1.0", "end-1c")

    for entry in json_data["fseq"]:
        words = entry.split(':')
        # Not worrying about headers or labels here
        if len(words) == 3:
            key = words[0]
            obj = cbobj[key]
            typ = words[2]
            if typ == "ENTRY" or typ == "TIGHTENTRY":
                jd[FI][key] = obj.get()
            elif typ == "BOX" or typ == "BOXLABEL":
                jd[FI][key] = obj.get("1.0", "end-1c")

    jd[IM] = impress_box.get("1.0", "end-1c")

    """ Try and fetch the signing physician entry and update """
    try:
        rd = rdobj.get()
        if rd:
            json_data["signer"] = rd
            # Update cached signer file
            with open(last_signer_file, "w") as f:
                f.write(json_data["signer"]+"\n")
    except:
        pass

    """ Save JSON data """
    with open(jsonfile, "w") as ofile:
        json.dump(jd, ofile, indent=2)
        print("", file=ofile)

# Define a function that will save existing data to a printable report text file
def create_report(rpt):
    save_data(json_data)
    with open(rpt, "w") as ofile:
        wrapper = textwrap.TextWrapper(width=60, replace_whitespace=False)
        print(json_data["title"], file=ofile)
        print("", file=ofile)
        if mrn == "BOGUS1234":
            print("MRN: NONE AVAILABLE", file=ofile)
        else:
            print("MRN: " + mrn, file=ofile)
        if session == "BOGUS5678":
            print("Session: NONE AVAILABLE", file=ofile)
        else:
            print("Session: " + session, file=ofile)
        print("", file=ofile)
        print("", file=ofile)
        if have_pseq:
            didprint = False
            for entry in json_data["pseq"]:
                words = entry.split(':')
                if len(words) == 4:
                    key = words[0]
                    lbl = words[1]
                    typ = words[2]
                    if typ == "MENU":
                        front = lbl + ":"
                        if didprint == False:
                            print(PARAMETERS, file=ofile)
                            print("", file=ofile)
                            didprint = True
                        print(front.ljust(10) + json_data[PM][key], file=ofile)
                        didprint = True
            if didprint == True:
                print("", file=ofile)
        print(HISTORY + ":", file=ofile)
        print("", file=ofile)
        print(PATIENT_AGE + " (years):  " + json_data[HI][PA], file=ofile)
        print(PATIENT_HISTORY + ":", file=ofile)
        for line in json_data[HI][PH].split('\n'):
            print(wrapper.fill(text=line), file=ofile)
        print("", file=ofile)
        print("", file=ofile)
        print(TECHNIQUE, file=ofile)
        for line in json_data[TH][DC].split('\n'):
            print(wrapper.fill(text=line), file=ofile)
        print("", file=ofile)
        if "ctdi" in json_data[TH]:
            print("CTDI: ".ljust(6) + json_data[TH]["ctdi"], file=ofile)
            print("DLP: ".ljust(6) + json_data[TH]["dlp"], file=ofile)
            print("", file=ofile)
        print(COMPARISON + ":", file=ofile)
        for line in json_data[TH][CM].split('\n'):
            print(wrapper.fill(text=line), file=ofile)
        print("", file=ofile)
        print(FINDINGS, file=ofile)

        for entry in json_data["fseq"]:
            words = entry.split(':')
            if len(words) == 1:
                print("", file=ofile)
            elif len(words) == 2:
                print("", file=ofile)
                print(words[1], file=ofile)
                print("", file=ofile)
            else:
                key = words[0]
                lbl = words[1]
                typ = words[2]
                if typ == "ENTRY":
                    front = lbl + ":"
                    print(front.ljust(25) + json_data[FI][key], file=ofile)
                elif typ == "TIGHTENTRY":
                    front = lbl + ":"
                    print(front.ljust(10) + json_data[FI][key], file=ofile)
                elif typ == "BOX" or typ == "BOXLABEL":
                    print(lbl + ":", file=ofile)
                    for line in json_data[FI][key].split('\n'):
                        print(wrapper.fill(text=line), file=ofile)

        print("", file=ofile)
        print(IMPRESSION, file=ofile)
        for line in json_data[IM].split('\n'):
            print(wrapper.fill(text=line), file=ofile)
        print("", file=ofile)

        if json_data["signed"]:
            print("", file=ofile)
            print("Signing Physician: ", json_data["signer"], file=ofile)
            print("Report Signed:  ", json_data["signtime"], file=ofile)
            print("", file=ofile)


# Define a function that will print the report after saving text output to a file
def print_report():
    create_report(reportfl)
    try:
        result = subprocess.run(["enscript", "-B", reportfl ], capture_output=True, text=True)
        if result.returncode != 0:
            tk.messagebox.showerror("Error", "Subprocess Error", result.stderr)
    except subprocess.CalledProcessError as e:
        tk.messagebox.showerror("Error", "Process Error", e.output)

# Define a function that will sign the report
def sign_report():
    """ The save will make sure everything, including signing physician, is saved """
    save_data(json_data)
    if json_data["signed"]:
        tk.messagebox.showerror("Sorry", "Report has been already been signed.")
    elif json_data["signer"] == "":
        tk.messagebox.showerror("Error", "No reviewing physician has been selected yet.")
    else:
        json_data["signed"] = True
        now = datetime.datetime.now()
        tzs = now.astimezone().tzname()
        json_data["signtime"] = now.strftime("%B %d, %Y  %H:%M") + " " + tzs

        """ Save data again to note we have now signed the report """
        """ This will also update the signer cache """
        save_data(json_data)

        """ Now update menus """
        for e in entryables:
            e.config(state="disabled", bg="orange")

# define a function that will exit, saving data and creating on-disk report as it does so.
def exit_edit():
    create_report(reportfl)
    exit(0)

#
# Add action buttons to the end
#
rowvar = rowvar + 1

#
# First check for whether it's been signed- we put up something different if the report has been signed.
#

if json_data["signed"]:
    rowvar = add_section_label("*** SIGNED ***", rowvar)
    rowvar = rowvar + 1
    rowvar = add_label("Report Signed By: " + json_data["signer"], rowvar, 0);
    rowvar = add_label("Report Signed On: " + json_data["signtime"], rowvar, 0);
else:
    """ Need to check that certain fields have been filled out """
    signers = cnfg_data["physicians"]

    #
    # If we already have a signer, use that as the default, otherwise
    # look for cached last signer and if they are still in the list,
    # set them as default
    #
    if json_data["signer"]:
        last_signer = json_data["signer"]
    else:
        try:
            with open(last_signer_file) as f:
                for line in f:
                    last_signer = line.rstrip()
                if last_signer not in signers:
                    last_signer = ""
        except:
            pass
    phdr = "Reviewing Physician"
    rowvar = rowvar + 1
    rdobj, rowvar = add_label_menu(phdr, signers, last_signer, rowvar, 0, len(phdr) + 8, 40)

rowvar = rowvar + 2

if not json_data["signed"]:
    sign_btn = tk.Button(root, text = 'Sign Report', command = sign_report)
    sign_btn.grid(sticky=tk.W, column=0, row=rowvar)

print_btn = tk.Button(root, text = 'Print Report', command = print_report)
print_btn.grid(column=1, row=rowvar)

exit_btn = tk.Button(root, text = 'Save and Exit', command = exit_edit)
exit_btn.grid(sticky=tk.W, column=2, row=rowvar)

#
# Enter edit tkinter loop
#
root.mainloop()
