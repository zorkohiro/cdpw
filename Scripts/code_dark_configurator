#!/usr/bin/python3
#
# Program to configure some Code Dark workstation parameters.
#

import tkinter as tk
from tkinter import messagebox
import argparse
import datetime
import json
import subprocess
from os import path

"""
We need to be able to configure the following items:

 DICOM
  Static Orthanc Port number to receive DICOM data
  Orthanc AET (Application Entity Title)

 Physicians

  Display a list of physicians who are authorized to sign reports.
  The list can be edited and in the edit box is a list of
  names separated by commas.

  NB: This mean no commas are allowed in physician names!

"""
""" Variables and Constants """
DC = "dicom"
PT = "port"
AE = "aet"
PH = "physicians"

cdpwconfig = "/code_dark/config"
jsonfile = cdpwconfig + "/" + "configurator.json"
vfile = "/usr/lib/kp-report/version"
cdw_version = ""
rowvar = 0
fontfamily = 'Times'
fontsize = 12
fontstring = fontfamily + ' ' + str(fontsize)
boxsize = 5

""" Argument Parsing """

parser = argparse.ArgumentParser(description="Code Dark Configurator")
parser.add_argument("-j", "--json", help="Input json file")

args = vars(parser.parse_args())

if args['json']:
    jsonfile=args['json']

try:
    with open(vfile) as ov:
        cdw_version = ov.readline()
except:
    pass

""" Data handlers """
def save_n_exit():
    """ Non-json configuration items """
    """ Validate Entered Time, if any """
    newtime = time_entry.get()
    if newtime != orig_time:
        if len(newtime) != 10:
            messagebox.showerror("Error", "Wrong Length for Time String")
            time_entry.set(orig_time)
            return
        try:
            mon = int(newtime[0:2])
            day = int(newtime[2:4])
            hr = int(newtime[4:6])
            minute = int(newtime[6:8])
            yr = int(newtime[8:10])
        except:
            messagebox.showerror("Error", "non-integer entries")
            time_entry.set(orig_time)
            return
        if mon < 1 or mon > 12:
            messagebox.showerror("Error", "bad month value")
            time_entry.set(orig_time)
            return
        if day < 1 or day > 31:
            messagebox.showerror("Error", "bad day value")
            time_entry.set(orig_time)
            return
        if hr < 0 or hr > 23:
            messagebox.showerror("Error", "bad hour value")
            time_entry.set(orig_time)
            return
        if minute < 0 or minute >= 60:
            messagebox.showerror("Error", "bad minute value")
            return
        if yr < 25 or yr > 99:
            messagebox.showerror("Error", "bad year value")
            time_entry.set(orig_time)
            return
        try:
            result = subprocess.run(["/usr/bin/sudo", "-n", "/usr/bin/date", newtime], capture_output=True, text=True)
            if result.returncode != 0:
                messagebox.showerror("Error", "Setting new time: " + result.stderr)
                time_entry.set(orig_time)
                return
        except subprocess.CalledProcessError as e:
            messagebox.showerror("Error", "Invoking process to set new time: " + e.output)
            time_entry.set(orig_time)
            return
    """ Json configuration items """
    json_changed = False
    ocfg_changed = False
    port = port_entry.get()
    if json_data[DC][PT] != port:
        json_data[DC][PT] = port
        json_changed = True
        ocfg_changed = True

    aet = aet_entry.get()
    if json_data[DC][AE] != aet:
        json_data[DC][AE] = aet
        json_changed = True
        ocfg_changed = True

    pboxstr = pbox.get("1.0", "end-1c")
    newp = [x.strip() for x in pboxstr.split(",")]
    if json_data[PH] != newp:
        json_data[PH] = newp
        json_changed = True

    if ocfg_changed:
        try:
            result = subprocess.run(["/usr/bin/orthanc_reconfigure"], capture_output=True, text=True)
            if result.returncode != 0:
                messagebox.showerror("Error reconfiguring Orthanc Parameters", result.stderr)
                return
        except subprocess.CalledProcessError as e:
            messagebox.showerror("Error", e.output)
            return

    if json_changed:
        with open(jsonfile, "w") as ofile:
            json.dump(json_data, ofile, indent=2)
            print("", file=ofile)
        messagebox.showinfo("Saved", "Persistent Information Changed. Reboot to Activate")

    exit(0)

""" TK functions """

def add_section_label(str, rv):
    tlab = tk.Label(root, text=str, relief=tk.FLAT, font=(fontfamily, fontsize + 1))
    tlab.grid(sticky=tk.N+tk.W, row=rv, column=0, columnspan=2, pady=(1,3))
    return rv + 1

def add_label(str, rv, col):
    tlab = tk.Label(root, text=str, relief=tk.FLAT, font=(fontfamily, fontsize))
    tlab.grid(sticky=tk.N+tk.W, row=rv, column=col, columnspan=2)
    return rv + 1

""" add an unlabeled box """
def add_box(insert, row):
    box = tk.Text(root, height=boxsize, width=50, font=fontstring)
    box.insert(tk.END, insert)
    box.grid(sticky=tk.EW, row=row, column=0, columnspan=2, pady=(0,10), padx=(0,9))
    return box, row + boxsize

""" Add an entry to the right of a label """
def add_label_entry(label, ivalue, rv, w):
    tlab = tk.Label(root, text=label, anchor=tk.W, justify="left", font=(fontfamily, fontsize))
    tlab.grid(sticky=tk.W, row=rv, column=0)
    tt_text = tk.StringVar()
    tt_text.set(ivalue)
    tt_entry = tk.Entry(root, textvariable=tt_text, width=w, justify="left", font=fontfamily + str(fontsize - 1))
    tt_entry.grid(sticky=tk.W, row=rv, column=1)
    return tt_text, rv + 1

""" Begin Main Code section """

#
# Read in JSON saved data
#
with open(jsonfile, "r") as infile:
    json_data = json.load(infile)

#
# Version check
#
version = json_data["version"]
if version < 2:
    print("Version of JSON too low: ", version)
    exit(1)

root=tk.Tk()
cdf ="Code Dark Configurator"
root.title("")
headliner = tk.Label(root, text=cdf, font=(fontfamily, fontsize + 1))
headliner.grid(sticky=tk.W + tk.N, row=rowvar, column=0)
if cdw_version != "":
    version = tk.Label(root, text="Code Dark Version: " + cdw_version, font=(fontfamily, fontsize + 1))
    version.grid(sticky=tk.W + tk.N, row=rowvar, column=1)
rowvar = rowvar + 1
rowvar = add_label("============================================================", rowvar, 0)
rowvar = rowvar + 1

rowvar = add_section_label("SYSTEM TIME", rowvar)
now = datetime.datetime.now()
orig_time = now.strftime("%m%d%H%M%y")
time_entry, rowvar = add_label_entry("Set New Time (MMDDhhmmYY)", orig_time, rowvar, 10)
rowvar = add_label("(MM = month, DD = day, hh = hour, mm = minute, YY = year)", rowvar, 0)
rowvar = rowvar + 1
rowvar = add_label("============================================================", rowvar, 0)

rowvar = add_section_label("DICOM PARAMETERS", rowvar)
port_entry, rowvar = add_label_entry("Listening Port", json_data[DC][PT], rowvar, 16)
aet_entry, rowvar = add_label_entry("AET", json_data[DC][AE], rowvar, 16)
rowvar = rowvar + 1
rowvar = add_label("============================================================", rowvar, 0)

rowvar = add_section_label("AUTHORIZED RADIOLOGISTS", rowvar)
rowvar = add_label("Edit List (this is a comma separated list)", rowvar, 0)
plist = json_data[PH]
pbox, rowvar = add_box(', '.join(plist), rowvar)

btn = tk.Button(root, text="Save and Exit", command=save_n_exit)
btn.grid(sticky=tk.W+tk.S, row=rowvar + 3, column=0)

root.mainloop()
